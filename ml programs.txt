# =======================================
# GLOBAL WATER & HEALTH ALLIANCE (GWHA)
# SIMPLE ML IMPLEMENTATION (All Phases)
# =======================================

import pandas as pd
import numpy as np
from sklearn.impute import KNNImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import r2_score, mean_squared_error, roc_auc_score, precision_score, recall_score

# -----------------------------
# PHASE 1: DATA PREPARATION & FEATURE ENGINEERING
# -----------------------------
df = pd.read_csv("data.csv")       # Use your dataset name here
df = df[(df["Year"] >= 2012) & (df["Year"] <= 2025)]

# Create engineered features
df["Water_Stress_Index"] = (df["Contaminant_Level"] + df["Nitrate_Level"] + df["Lead_Concentration"]) / df["Dissolved_Oxygen"]
df["Health_Vulnerability_Score"] = (df["Diarrheal_Cases"] + df["Cholera_Cases"] + df["Typhoid_Cases"]) / (df["Healthcare_Access_Index"] + 1)
df["Eco_Sanitation_Index"] = (df["Access_to_Clean_Water"] * df["Sanitation_Coverage"]) / (1 + df["Turbidity"])
df["Composite_Risk_Score"] = df["Water_Stress_Index"] + df["Health_Vulnerability_Score"] - df["Eco_Sanitation_Index"]

# Handle missing values
imputer = KNNImputer(n_neighbors=5)
df_imputed = pd.DataFrame(imputer.fit_transform(df.select_dtypes(include=[np.number])),
                          columns=df.select_dtypes(include=[np.number]).columns)

# Normalize
scaler = MinMaxScaler()`		
df_scaled = pd.DataFrame(scaler.fit_transform(df_imputed), columns=df_imputed.columns)
print("‚úÖ Phase 1 completed")

# -----------------------------
# PHASE 2: KNN CLASSIFICATION & FEATURE SELECTION
# -----------------------------
X = df_scaled[["GDP_per_Capita", "Sanitation_Coverage", "Contaminant_Level"]]
y = pd.cut(df_scaled["GDP_per_Capita"], bins=3, labels=["Low-income", "Mid-income", "High-income"])

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X, y)
df_scaled["Region_Type"] = knn.predict(X)
print("‚úÖ Phase 2 completed")

# Simple VIF calculation
for i in range(len(X.columns)):
    vif = variance_inflation_factor(X.values, i)
    print(X.columns[i], "=", round(vif, 2))

# -----------------------------
# PHASE 3: MODEL TRAINING & EVALUATION
# -----------------------------
X_all = df_scaled.drop(columns=["Health_Vulnerability_Score", "Region_Type"])
y_reg = df_scaled["Health_Vulnerability_Score"]

# Model 1: Decision Tree Regressor
reg1 = DecisionTreeRegressor()
reg1.fit(X_all, y_reg)
pred1 = reg1.predict(X_all)
print("\nDecision Tree Regressor (Health Vulnerability)")
print("R2 =", r2_score(y_reg, pred1))
print("RMSE =", mean_squared_error(y_reg, pred1, squared=False))
 
# Model 2: Naive Bayes Classifier
threshold = np.percentile(df_scaled["Composite_Risk_Score"], 75)
y_nb = (df_scaled["Composite_Risk_Score"] > threshold).astype(int)
X_nb=(df_scaled.drop(columns=["Composite_Risk_Score","Health_Vulnerability_Score","Region_Type"])
nb = GaussianNB()
nb.fit(X_nb, y_nb)
pred_nb = nb.predict(X_nb)
prob_nb = nb.predict_proba(X_nb)[:,1]
print("ROC-AUC =", round(roc_auc_score(y_nb, prob_nb), 3))
print("Precision =", round(precision_score(y_nb, pred_nb), 3))
print("Recall =", round(recall_score(y_nb, pred_nb), 3))

# Model 3: Decision Tree Regressor (Disease Cases)
print("‚úÖ Phase 3 completed")
# -----------------------------

# PHASE 4: SCENARIO SIMULATION (2030)
y_multi = df_scaled[["Cholera_Cases","Diarrheal_Cases","Typhoid_Cases"]]
reg2 = DecisionTreeRegressor()
reg2.fit(X_all, y_multi)
pred2 = reg2.predict(X_all)
print("\nDisease Prediction (Multi-output)")
print("R2 =", r2_score(y_multi, pred2, multioutput='uniform_average'))
print("RMSE =", mean_squared_error(y_multi, pred2, squared=False))

# -----------------------------
df_future = df_scaled.copy()
df_future["Sanitation_Coverage"] *= 1.20
df_future["GDP_per_Capita"] *= 1.10
df_future["Contaminant_Level"] *= 1.15

df_future["Water_Stress_Index"] = (df_future["Contaminant_Level"] + df_future["Nitrate_Level"] + df_future["Lead_Concentration"]) / df_future["Dissolved_Oxygen"]
df_future["Health_Vulnerability_Score"] = (df_future["Diarrheal_Cases"] + df_future["Cholera_Cases"] + df_future["Typhoid_Cases"]) / (df_future["Healthcare_Access_Index"] + 1)
df_future["Eco_Sanitation_Index"] = (df_future["Access_to_Clean_Water"] * df_future["Sanitation_Coverage"]) / (1 + df_future["Turbidity"])
df_future["Composite_Risk_Score"] = df_future["Water_Stress_Index"] + df_future["Health_Vulnerability_Score"] - df_future["Eco_Sanitation_Index"]

print("\nüåç PHASE 4: 2030 Simulation Results")
print("Average Composite Risk Before:", df_scaled["Composite_Risk_Score"].mean())
print("Average Composite Risk After:", df_future["Composite_Risk_Score"].mean())
print("‚úÖ Phase 4 completed")
